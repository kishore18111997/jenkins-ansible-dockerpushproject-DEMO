pipeline {
    agent {label 'linux'}

    stages {
        stage('git clone from CICD') {
            steps {
                git branch: 'main', url: 'https://github.com/kishore18111997/CICDproject'
            }
        }
        stage('maven build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('deploy artifact to docker instance') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'docker-master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''cd /opt/docker;
ls;''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/home/ubuntu', remoteDirectorySDF: false, removePrefix: '/webapp/target', sourceFiles: '/webapp/target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }
        stage('git clone project files') {
            steps {
                git 'https://github.com/kishore18111997/jenkins-ansible-dockerpushproject-DEMO'
            }
        }
        stage('invoke ansible-playbook') {
            steps {
                ansiblePlaybook credentialsId: 'doggnaete-mumbai-keypair', disableHostKeyChecking: true, installation: 'ansible', inventory: '/home/jenkins/workspace/pipeline-ansible-dockerpush/inventory.yml', playbook: '/home/jenkins/workspace/pipeline-ansible-dockerpush/dockerbuild-push-playbook.yml'
            }
        }
        stage('containerize the docker image') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'docker-master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''docker rm -f kishore;
docker rmi -f kishore18111997/deploytomcat;
cd /opt/docker/;
docker run -d --name kishore -p 8080:8080 kishore18111997/deploytomcat;''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
            }
        }
    }
}
